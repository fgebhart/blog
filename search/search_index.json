{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Hi my name is Fabian Gebhart and this is my blog. I blog about tech, Python, the PyData stack, 3d-Printing and more. A large fraction of my posts are how-to guides, which hopefully help you solve a particular problem. Head over to the tags section to see all currently existing topics. My Blogging Philosophy Community Engagement : Finding people with similar interests online is easy nowadays. While community engagement can be challenging, it can also be enriching to share projects, ideas and thoughts. Learning : Learning is bilateral. Not only the reader will learn something from the blog post, also the author has to achieve profound knowledge of the written material. Sharing is Caring : So many great articles, blogs, docs and books out there that I read and absorbed. Thanks to everyone who is sharing their knowledge. This blog is about giving back my learnings. Efficiency : Keep everything compact and concise Tip Let's practice community engagement by starting a discussion below a blog post enjoy reading!","title":"Welcome"},{"location":"#welcome","text":"Hi my name is Fabian Gebhart and this is my blog. I blog about tech, Python, the PyData stack, 3d-Printing and more. A large fraction of my posts are how-to guides, which hopefully help you solve a particular problem. Head over to the tags section to see all currently existing topics.","title":"Welcome"},{"location":"#my-blogging-philosophy","text":"Community Engagement : Finding people with similar interests online is easy nowadays. While community engagement can be challenging, it can also be enriching to share projects, ideas and thoughts. Learning : Learning is bilateral. Not only the reader will learn something from the blog post, also the author has to achieve profound knowledge of the written material. Sharing is Caring : So many great articles, blogs, docs and books out there that I read and absorbed. Thanks to everyone who is sharing their knowledge. This blog is about giving back my learnings. Efficiency : Keep everything compact and concise Tip Let's practice community engagement by starting a discussion below a blog post enjoy reading!","title":"My Blogging Philosophy"},{"location":"tags/","text":"Tags This page lists all available tags and the corresponding blog posts. dns GitHub Pages with Namecheap Domain ebook Auto-sync ZEIT Newspaper to your Tolino Cloud github actions Auto-sync ZEIT Newspaper to your Tolino Cloud github pages GitHub Pages with Namecheap Domain guide Auto-sync ZEIT Newspaper to your Tolino Cloud GitHub Pages with Namecheap Domain namecheap GitHub Pages with Namecheap Domain newspaper Auto-sync ZEIT Newspaper to your Tolino Cloud python Auto-sync ZEIT Newspaper to your Tolino Cloud selenium Auto-sync ZEIT Newspaper to your Tolino Cloud","title":"Tags"},{"location":"tags/#tags","text":"This page lists all available tags and the corresponding blog posts.","title":"Tags"},{"location":"tags/#dns","text":"GitHub Pages with Namecheap Domain","title":"dns"},{"location":"tags/#ebook","text":"Auto-sync ZEIT Newspaper to your Tolino Cloud","title":"ebook"},{"location":"tags/#github-actions","text":"Auto-sync ZEIT Newspaper to your Tolino Cloud","title":"github actions"},{"location":"tags/#github-pages","text":"GitHub Pages with Namecheap Domain","title":"github pages"},{"location":"tags/#guide","text":"Auto-sync ZEIT Newspaper to your Tolino Cloud GitHub Pages with Namecheap Domain","title":"guide"},{"location":"tags/#namecheap","text":"GitHub Pages with Namecheap Domain","title":"namecheap"},{"location":"tags/#newspaper","text":"Auto-sync ZEIT Newspaper to your Tolino Cloud","title":"newspaper"},{"location":"tags/#python","text":"Auto-sync ZEIT Newspaper to your Tolino Cloud","title":"python"},{"location":"tags/#selenium","text":"Auto-sync ZEIT Newspaper to your Tolino Cloud","title":"selenium"},{"location":"blog/auto-sync-zeit-newspaper-to-your-tolino-cloud/","tags":["ebook","github actions","guide","newspaper","python","selenium"],"text":"How to automatically sync your ZEIT Newspaper to your Tolino Cloud? This guide will outline the steps needed to set up a scheduled syncing mechanism that downloads the ZEIT newspaper and uploads it to your Tolino cloud . This mechanism will run once per week on GitHub Actions, so you don't have to worry about execution or deployment. The automatism is based on Selenium , which takes care of clicking the relevant browser buttons for you. Let's make reading the newspaper on your Tolino even more fun! Motivation Reading the newspaper on an e-book reader device has many advantages. First, the device is small and can be used almost everywhere, while the printed edition usually comes in a not-so-small format. Second, depending on the version of your device, it might come with inbuilt background light, which allows for reading in gloomy areas. Third, in the case of ZEIT , the digital epub edition does not even contain any advertisement at all (by the time of writing - let's hope it stays like this). And fourth, having a newspaper in a digital format enables searching through the document very easily. While e-book readers became more convenient over the past few years, using them for reading the newspaper is still not very common. One huge disadvantage is the missing integration of publishers with the ebook reader cloud providers. Taking care of manually uploading the newspaper to the Tolino cloud is cumbersome and probably leads to the fact of reading less. While this seems automated for the Amazon Kindle , there is no automatism for Tolino devices in place . This guide will bridge this gap. Guide This guide will explain the usage of zeit-on-tolino , a little application I built recently. The app is based on GitHub Actions and Selenium . It requires a few manual steps to set up the syncing mechanism. Once configured, it will run in a cron -based fashion to download your epub newspaper and subsequently upload it to your Tolino cloud every Wednesday evening (after the release was published). Attention This guide assumes the following prerequisites to be fulfilled: You are able to log in at premium.zeit.de and download the epub edition of the ZEIT newspaper. You do own a Tolino e-book reader device and have access to the Tolino cloud . Fork the zeit-on-tolino GitHub Repository Go to the zeit-on-tolino repo and hit the fork button (or follow this link ). On the upcoming Create a new fork page, fill the form with values of your choice and hit the Create Fork button. Allow GitHub Actions to Run Once the forking was successful, navigate to the GitHub Actions settings page (Settings \u2192 Actions \u2192 General) of your repo and allow all actions and reusable workflows. This step is required to allow the execution of GitHub Actions from the upstream zeit-on-tolino repo in your forked repo. Add Tolino and ZEIT Credentials to GitHub Repo Secrets For the application to down- and upload the epub file, your login credentials for both Tolino cloud and ZEIT are needed. This step shows how to add them to your repository secrets. Note, that repository secrets are kept secret and can only be accessed by the repository owner and within the GitHub Actions workflows. Navigate to the Actions Secrets page of your repo (Settings \u2192 Secrets \u2192 Actions) and add a new secret by clicking on the New repository secret button: The following secrets are required: Secret Name Description TOLINO_PARTNER_SHOP The name of the Tolino partner shop, e.g. thalia (see supported shops ) TOLINO_USER The username (usually an email address) you use for logging into the Tolino cloud TOLINO_PASSWORD The associated password ZEIT_PREMIUM_USER Your ZEIT premium username ZEIT_PREMIUM_PASSWORD The associated password Once you are done entering the five required secrets, they are ready to be used within the GitHub Action workflow. Your list of repo secrets should now look like this: Execution of the Periodic GitHub Actions Sync Workflow Everything should be in place by now and the sync mechanism should be triggered every Wednesday evening. To inspect the exact time the workflow is scheduled to be executed, have a look at the configuration file of the workflow . To check whether the workflow is executed in your repo, navigate to the Periodic Sync workflow in the Actions tab (Actions \u2192 Workflows \u2192 Periodic Sync). Note, that the Periodic Sync workflow offers to be triggered manually, by clicking on the Run Workflow button. This is potentially useful, after initially setting up the project. I hope you were able to successfully set up the auto-syncing \u2013 happy to receive comments and feedback. \ud83d\udc19 Troubleshooting In case some of the above steps do not work as expected, I'd suggest using the comment section of this blog post for discussions. For frequently asked questions check out the FAQ section of zeit-on-tolino . If you happen to have issues with your workflow run, feel free to open an issue for further investigation.","title":"Auto-sync ZEIT Newspaper to your Tolino Cloud"},{"location":"blog/auto-sync-zeit-newspaper-to-your-tolino-cloud/#how-to-automatically-sync-your-zeit-newspaper-to-your-tolino-cloud","text":"This guide will outline the steps needed to set up a scheduled syncing mechanism that downloads the ZEIT newspaper and uploads it to your Tolino cloud . This mechanism will run once per week on GitHub Actions, so you don't have to worry about execution or deployment. The automatism is based on Selenium , which takes care of clicking the relevant browser buttons for you. Let's make reading the newspaper on your Tolino even more fun!","title":"How to automatically sync your ZEIT Newspaper to your Tolino Cloud?"},{"location":"blog/auto-sync-zeit-newspaper-to-your-tolino-cloud/#motivation","text":"Reading the newspaper on an e-book reader device has many advantages. First, the device is small and can be used almost everywhere, while the printed edition usually comes in a not-so-small format. Second, depending on the version of your device, it might come with inbuilt background light, which allows for reading in gloomy areas. Third, in the case of ZEIT , the digital epub edition does not even contain any advertisement at all (by the time of writing - let's hope it stays like this). And fourth, having a newspaper in a digital format enables searching through the document very easily. While e-book readers became more convenient over the past few years, using them for reading the newspaper is still not very common. One huge disadvantage is the missing integration of publishers with the ebook reader cloud providers. Taking care of manually uploading the newspaper to the Tolino cloud is cumbersome and probably leads to the fact of reading less. While this seems automated for the Amazon Kindle , there is no automatism for Tolino devices in place . This guide will bridge this gap.","title":"Motivation"},{"location":"blog/auto-sync-zeit-newspaper-to-your-tolino-cloud/#guide","text":"This guide will explain the usage of zeit-on-tolino , a little application I built recently. The app is based on GitHub Actions and Selenium . It requires a few manual steps to set up the syncing mechanism. Once configured, it will run in a cron -based fashion to download your epub newspaper and subsequently upload it to your Tolino cloud every Wednesday evening (after the release was published). Attention This guide assumes the following prerequisites to be fulfilled: You are able to log in at premium.zeit.de and download the epub edition of the ZEIT newspaper. You do own a Tolino e-book reader device and have access to the Tolino cloud .","title":"Guide"},{"location":"blog/auto-sync-zeit-newspaper-to-your-tolino-cloud/#fork-the-zeit-on-tolino-github-repository","text":"Go to the zeit-on-tolino repo and hit the fork button (or follow this link ). On the upcoming Create a new fork page, fill the form with values of your choice and hit the Create Fork button.","title":"Fork the zeit-on-tolino GitHub Repository"},{"location":"blog/auto-sync-zeit-newspaper-to-your-tolino-cloud/#allow-github-actions-to-run","text":"Once the forking was successful, navigate to the GitHub Actions settings page (Settings \u2192 Actions \u2192 General) of your repo and allow all actions and reusable workflows. This step is required to allow the execution of GitHub Actions from the upstream zeit-on-tolino repo in your forked repo.","title":"Allow GitHub Actions to Run"},{"location":"blog/auto-sync-zeit-newspaper-to-your-tolino-cloud/#add-tolino-and-zeit-credentials-to-github-repo-secrets","text":"For the application to down- and upload the epub file, your login credentials for both Tolino cloud and ZEIT are needed. This step shows how to add them to your repository secrets. Note, that repository secrets are kept secret and can only be accessed by the repository owner and within the GitHub Actions workflows. Navigate to the Actions Secrets page of your repo (Settings \u2192 Secrets \u2192 Actions) and add a new secret by clicking on the New repository secret button: The following secrets are required: Secret Name Description TOLINO_PARTNER_SHOP The name of the Tolino partner shop, e.g. thalia (see supported shops ) TOLINO_USER The username (usually an email address) you use for logging into the Tolino cloud TOLINO_PASSWORD The associated password ZEIT_PREMIUM_USER Your ZEIT premium username ZEIT_PREMIUM_PASSWORD The associated password Once you are done entering the five required secrets, they are ready to be used within the GitHub Action workflow. Your list of repo secrets should now look like this:","title":"Add Tolino and ZEIT Credentials to GitHub Repo Secrets"},{"location":"blog/auto-sync-zeit-newspaper-to-your-tolino-cloud/#execution-of-the-periodic-github-actions-sync-workflow","text":"Everything should be in place by now and the sync mechanism should be triggered every Wednesday evening. To inspect the exact time the workflow is scheduled to be executed, have a look at the configuration file of the workflow . To check whether the workflow is executed in your repo, navigate to the Periodic Sync workflow in the Actions tab (Actions \u2192 Workflows \u2192 Periodic Sync). Note, that the Periodic Sync workflow offers to be triggered manually, by clicking on the Run Workflow button. This is potentially useful, after initially setting up the project. I hope you were able to successfully set up the auto-syncing \u2013 happy to receive comments and feedback. \ud83d\udc19","title":"Execution of the Periodic GitHub Actions Sync Workflow"},{"location":"blog/auto-sync-zeit-newspaper-to-your-tolino-cloud/#troubleshooting","text":"In case some of the above steps do not work as expected, I'd suggest using the comment section of this blog post for discussions. For frequently asked questions check out the FAQ section of zeit-on-tolino . If you happen to have issues with your workflow run, feel free to open an issue for further investigation.","title":"Troubleshooting"},{"location":"blog/github-pages-with-namecheap-domain/","tags":["dns","github pages","guide","namecheap"],"text":"How to Use a Custom Namecheap Domain with GitHub Pages? This post will guide you through the different steps needed to configure a custom Namecheap domain with your static website hosted on GitHub Pages. Note This guide focuses on Namecheap as a domain name provider. The overall approach is likely similar to other domain name providers, however, the steps outlined below are specific to Namecheap and cannot be applied to other domain name providers directly. Motivation Sometimes you want your GitHub Page to be reachable via a custom domain to provide a catchy name or to put it next to your existing website by using a subdomain. Note, that there are a bunch of resources on this topic out there already, but it seemed like none of them puts all the required pieces into a single place, thus I came up with this guide. Example Consider the following example: The GitHub repo of this blog is located at github.com/fgebhart/blog and the default domain for its corresponding GitHub Page would be fgebhart.github.io/blog . Now as you can see, I obtained the domain fgebhart.dev from Namecheap and used the subdomain blog.fgebhart.dev as the custom domain for this blog. Guide Let's configure a custom domain for your GitHub Page. Attention This guide assumes the following prerequisites to be fulfilled: You have a GitHub repository set up and its corresponding static GitHub Page is published at the default domain name (i.e. <user>.github.io/<repo> ) You bought a domain on Namecheap and can configure it via the Namecheap Dashboard Namecheap Configuration Head over to your Namecheap Dashboard and hit the MANAGE button: On the Domains \u2192 Details page click the Advanced DNS tab: In the Host Records section, you need to add five entries. Four of them are of type A Record with Host being @ pointing to the GitHub Pages IP addresses. The fifth record will be the actual CNAME Record pointing to your default GitHub Page domain. The below screenshot shows the values needed to map your new custom domain ( blog.fgebhart.dev in this case) to the default GitHub Pages domain ( fgebhart.github.io/blog ) as given in the above example . Copy the values from this table and configure your host records accordingly. Type Host Value TTL A Record @ 185.199.108.153 Automatic A Record @ 185.199.109.153 Automatic A Record @ 185.199.110.153 Automatic A Record @ 185.199.111.153 Automatic CNAME Record blog fgebhart.github.io Automatic Hint Both subdomains and apex domains are supported with GitHub Pages. If you prefer to use the apex domain instead of the subdomain you have to enter www instead of blog in the Host column since www is just a usual subdomain from DNS perspective. It usually takes a while until this configuration becomes active. After waiting for one hour verify your DNS settings to be active by running the following command (replace blog.fgebhart.dev with your domain of course): dig +noall +answer +nocmd blog.fgebhart.dev Your output should look similar to this one: blog.fgebhart.dev. 1799 IN CNAME fgebhart.github.io. fgebhart.github.io. 3600 IN A 185.199.110.153 fgebhart.github.io. 3600 IN A 185.199.111.153 fgebhart.github.io. 3600 IN A 185.199.108.153 fgebhart.github.io. 3600 IN A 185.199.109.153 If you get the expected output, your Namecheap configuration is in place and we can proceed with the configuration of GitHub. GitHub Pages Configuration Go to your GitHub repository and navigate to the GitHub Pages settings. For this blog the URL is https://github.com/fgebhart/blog/settings/pages . Given the above-mentioned prerequisites, your static website should already be deployed to GitHub Pages and accessible via the default github.io URL (if you still need to set up the deployment, I'd suggest having a look at the GitHub Actions Workflow of this blog , check out the GitHub docs on publishing your website or reading the docs of mkdocs-material regarding publishing ). Scroll down to the Custom Domain section and enter your custom domain into the input field. In the case of this blog blog.fgebhart.dev was entered: Hint Again, if you prefer to use your apex domain , simply omit the subdomain and enter e.g. fgebhart.dev here. In case your Namecheap configuration was successful as described above, the GitHub DNS check should pass and you should be able to hit the Save button. It is also strongly recommended to enable HTTPS for your custom domain by checking the Enforce HTTPS box. After a moment your static website should be accessible via your new domain. \ud83d\udc19 Troubleshooting My Website is not Accessible via the Custom Domain Patience. Updating and propagating new DNS records can take quite some time. This makes iterating a tedious task, but using the above-mentioned dig command helps verify that things are set up as intended. Each Commit to my Repo seems to break the configured Domain Routing In case a push/commit to your repo containing the source code of your static website seems to break the DNS configuration, you might need to add a CNAME file to your repo. Usually, configuring the custom domain on the GitHub Pages settings tab will add a CNAME file to the branch from which your static page will be deployed. However, a GitHub Action could be implemented in such a way, that it would overwrite the CNAME file with every commit. If this is the case, you would need to add the file manually to your repo. To do so, have a look at the deploy branch of your repo (usually gh-pages ) to conclude which folder of your source code branch will be deployed from the deploy branch. In the root of this folder, you have to add a file called CNAME (all uppercase). The content of the file must contain a single line only, which is the custom URL to point to your GitHub Page. In the case of this blog, here is the CNAME file which contains blog.fgebhart.dev . For more details have a look at the GitHub Troubleshooting docs . External Links GitHub docs on managing custom domains with GitHub Pages (Visited 2022-09-18) Namecheap Knowledgebase on linking your domain to GitHub Pages (Visited 2022-09-18) Namecheap guide on the different DNS types (Visited 2022-09-19)","title":"GitHub Pages with Namecheap Domain"},{"location":"blog/github-pages-with-namecheap-domain/#how-to-use-a-custom-namecheap-domain-with-github-pages","text":"This post will guide you through the different steps needed to configure a custom Namecheap domain with your static website hosted on GitHub Pages. Note This guide focuses on Namecheap as a domain name provider. The overall approach is likely similar to other domain name providers, however, the steps outlined below are specific to Namecheap and cannot be applied to other domain name providers directly.","title":"How to Use a Custom Namecheap Domain with GitHub Pages?"},{"location":"blog/github-pages-with-namecheap-domain/#motivation","text":"Sometimes you want your GitHub Page to be reachable via a custom domain to provide a catchy name or to put it next to your existing website by using a subdomain. Note, that there are a bunch of resources on this topic out there already, but it seemed like none of them puts all the required pieces into a single place, thus I came up with this guide.","title":"Motivation"},{"location":"blog/github-pages-with-namecheap-domain/#example","text":"Consider the following example: The GitHub repo of this blog is located at github.com/fgebhart/blog and the default domain for its corresponding GitHub Page would be fgebhart.github.io/blog . Now as you can see, I obtained the domain fgebhart.dev from Namecheap and used the subdomain blog.fgebhart.dev as the custom domain for this blog.","title":"Example"},{"location":"blog/github-pages-with-namecheap-domain/#guide","text":"Let's configure a custom domain for your GitHub Page. Attention This guide assumes the following prerequisites to be fulfilled: You have a GitHub repository set up and its corresponding static GitHub Page is published at the default domain name (i.e. <user>.github.io/<repo> ) You bought a domain on Namecheap and can configure it via the Namecheap Dashboard","title":"Guide"},{"location":"blog/github-pages-with-namecheap-domain/#namecheap-configuration","text":"Head over to your Namecheap Dashboard and hit the MANAGE button: On the Domains \u2192 Details page click the Advanced DNS tab: In the Host Records section, you need to add five entries. Four of them are of type A Record with Host being @ pointing to the GitHub Pages IP addresses. The fifth record will be the actual CNAME Record pointing to your default GitHub Page domain. The below screenshot shows the values needed to map your new custom domain ( blog.fgebhart.dev in this case) to the default GitHub Pages domain ( fgebhart.github.io/blog ) as given in the above example . Copy the values from this table and configure your host records accordingly. Type Host Value TTL A Record @ 185.199.108.153 Automatic A Record @ 185.199.109.153 Automatic A Record @ 185.199.110.153 Automatic A Record @ 185.199.111.153 Automatic CNAME Record blog fgebhart.github.io Automatic Hint Both subdomains and apex domains are supported with GitHub Pages. If you prefer to use the apex domain instead of the subdomain you have to enter www instead of blog in the Host column since www is just a usual subdomain from DNS perspective. It usually takes a while until this configuration becomes active. After waiting for one hour verify your DNS settings to be active by running the following command (replace blog.fgebhart.dev with your domain of course): dig +noall +answer +nocmd blog.fgebhart.dev Your output should look similar to this one: blog.fgebhart.dev. 1799 IN CNAME fgebhart.github.io. fgebhart.github.io. 3600 IN A 185.199.110.153 fgebhart.github.io. 3600 IN A 185.199.111.153 fgebhart.github.io. 3600 IN A 185.199.108.153 fgebhart.github.io. 3600 IN A 185.199.109.153 If you get the expected output, your Namecheap configuration is in place and we can proceed with the configuration of GitHub.","title":"Namecheap Configuration"},{"location":"blog/github-pages-with-namecheap-domain/#github-pages-configuration","text":"Go to your GitHub repository and navigate to the GitHub Pages settings. For this blog the URL is https://github.com/fgebhart/blog/settings/pages . Given the above-mentioned prerequisites, your static website should already be deployed to GitHub Pages and accessible via the default github.io URL (if you still need to set up the deployment, I'd suggest having a look at the GitHub Actions Workflow of this blog , check out the GitHub docs on publishing your website or reading the docs of mkdocs-material regarding publishing ). Scroll down to the Custom Domain section and enter your custom domain into the input field. In the case of this blog blog.fgebhart.dev was entered: Hint Again, if you prefer to use your apex domain , simply omit the subdomain and enter e.g. fgebhart.dev here. In case your Namecheap configuration was successful as described above, the GitHub DNS check should pass and you should be able to hit the Save button. It is also strongly recommended to enable HTTPS for your custom domain by checking the Enforce HTTPS box. After a moment your static website should be accessible via your new domain. \ud83d\udc19","title":"GitHub Pages Configuration"},{"location":"blog/github-pages-with-namecheap-domain/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"blog/github-pages-with-namecheap-domain/#my-website-is-not-accessible-via-the-custom-domain","text":"Patience. Updating and propagating new DNS records can take quite some time. This makes iterating a tedious task, but using the above-mentioned dig command helps verify that things are set up as intended.","title":"My Website is not Accessible via the Custom Domain"},{"location":"blog/github-pages-with-namecheap-domain/#each-commit-to-my-repo-seems-to-break-the-configured-domain-routing","text":"In case a push/commit to your repo containing the source code of your static website seems to break the DNS configuration, you might need to add a CNAME file to your repo. Usually, configuring the custom domain on the GitHub Pages settings tab will add a CNAME file to the branch from which your static page will be deployed. However, a GitHub Action could be implemented in such a way, that it would overwrite the CNAME file with every commit. If this is the case, you would need to add the file manually to your repo. To do so, have a look at the deploy branch of your repo (usually gh-pages ) to conclude which folder of your source code branch will be deployed from the deploy branch. In the root of this folder, you have to add a file called CNAME (all uppercase). The content of the file must contain a single line only, which is the custom URL to point to your GitHub Page. In the case of this blog, here is the CNAME file which contains blog.fgebhart.dev . For more details have a look at the GitHub Troubleshooting docs .","title":"Each Commit to my Repo seems to break the configured Domain Routing"},{"location":"blog/github-pages-with-namecheap-domain/#external-links","text":"GitHub docs on managing custom domains with GitHub Pages (Visited 2022-09-18) Namecheap Knowledgebase on linking your domain to GitHub Pages (Visited 2022-09-18) Namecheap guide on the different DNS types (Visited 2022-09-19)","title":"External Links"},{"location":"tags/","text":"Tags This page lists all available tags and the corresponding blog posts. dns GitHub Pages with Namecheap Domain ebook Auto-sync ZEIT Newspaper to your Tolino Cloud github actions Auto-sync ZEIT Newspaper to your Tolino Cloud github pages GitHub Pages with Namecheap Domain guide Auto-sync ZEIT Newspaper to your Tolino Cloud GitHub Pages with Namecheap Domain namecheap GitHub Pages with Namecheap Domain newspaper Auto-sync ZEIT Newspaper to your Tolino Cloud python Auto-sync ZEIT Newspaper to your Tolino Cloud selenium Auto-sync ZEIT Newspaper to your Tolino Cloud","title":"Tags"},{"location":"tags/#tags","text":"This page lists all available tags and the corresponding blog posts.","title":"Tags"},{"location":"tags/#dns","text":"GitHub Pages with Namecheap Domain","title":"dns"},{"location":"tags/#ebook","text":"Auto-sync ZEIT Newspaper to your Tolino Cloud","title":"ebook"},{"location":"tags/#github-actions","text":"Auto-sync ZEIT Newspaper to your Tolino Cloud","title":"github actions"},{"location":"tags/#github-pages","text":"GitHub Pages with Namecheap Domain","title":"github pages"},{"location":"tags/#guide","text":"Auto-sync ZEIT Newspaper to your Tolino Cloud GitHub Pages with Namecheap Domain","title":"guide"},{"location":"tags/#namecheap","text":"GitHub Pages with Namecheap Domain","title":"namecheap"},{"location":"tags/#newspaper","text":"Auto-sync ZEIT Newspaper to your Tolino Cloud","title":"newspaper"},{"location":"tags/#python","text":"Auto-sync ZEIT Newspaper to your Tolino Cloud","title":"python"},{"location":"tags/#selenium","text":"Auto-sync ZEIT Newspaper to your Tolino Cloud","title":"selenium"}]}